{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95e0633a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "import operator\n",
    "import math\n",
    "from timeit import default_timer as timer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c68c644",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 25 nodes - WHEN LOADING LARGER NETWORK COLUMN_NAMES MUST BE EXTENDED TO THE CORRECT NUMBER OF NODES\n",
    "\n",
    "column_names = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\",\"9\",\"10\",\"11\", \"12\", \"13\", \"14\",\n",
    "                \"15\", \"16\", \"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\"]\n",
    "cost = pd.read_csv(\"CAB25C.csv\", header=None, sep=';',decimal=\",\",  names=column_names)\n",
    "cost.index += 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a9de425",
   "metadata": {},
   "outputs": [],
   "source": [
    "flow_m = pd.read_csv(\"CAB25F.csv\", header=None, sep=';',decimal=\",\",  names=column_names)\n",
    "flow_m.index += 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27663c87",
   "metadata": {},
   "outputs": [],
   "source": [
    "nodes = [1,2,3,4,5,6,7,8,9,10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ec3a314",
   "metadata": {},
   "outputs": [],
   "source": [
    "def TNC_Flow (cost,alpha,solution,nodes,flow):\n",
    "    ccc = 0\n",
    "    s = solution[1]\n",
    "    hubs = solution[0]\n",
    "        \n",
    "    for node in nodes:\n",
    "        nhub = s[node-1]\n",
    "        for meta in nodes:\n",
    "            flow = flow_m[str(node)][meta]\n",
    "            mhub = s[meta-1]\n",
    "            c = flow*(cost[str(node)][nhub] + alpha*cost[str(nhub)][mhub] + cost[str(mhub)][meta])\n",
    "            ccc += c\n",
    "            \n",
    "    return ccc/flow_m.sum().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1546b58a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_solutions_noconstraint(p,n):\n",
    "    \n",
    "    # Hubs selection\n",
    "    hubs = []\n",
    "    while len(hubs) < p:\n",
    "        x = random.randint(1, n)\n",
    "        if x not in hubs:\n",
    "            hubs.append(x)\n",
    "            \n",
    "    # Random Solution with incorrect hub position        \n",
    "    solution = []\n",
    "    while len(solution) < n:\n",
    "        x = random.choice(hubs)\n",
    "        solution.append(x)\n",
    "              \n",
    "    # Random Solution Hub position correction \n",
    "    for hub in hubs:\n",
    "        solution[hub-1] = hub\n",
    "    \n",
    "    return hubs,solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed6afee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def normal_swap(solution,hubs,n):\n",
    "    current_solution = solution\n",
    "    possible_mut = []\n",
    "    for i in range(0,n-1):\n",
    "        if i+1 not in hubs:\n",
    "            possible_mut.append(i)\n",
    "        \n",
    "    i = random.choice(possible_mut)\n",
    "    x = current_solution[i]\n",
    "    mut = random.choice(possible_mut)\n",
    "    current_solution[i] = current_solution[mut]\n",
    "    current_solution[mut] = x\n",
    "\n",
    "    return hubs,current_solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0f55712",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hub_cluster_swap(solution,hubs):\n",
    "    current_hubs = hubs\n",
    "    current_solution = solution\n",
    "    \n",
    "    to_swap_hub = random.choice(current_hubs)\n",
    "    \n",
    "    possible_nodes= []\n",
    "    p = 0\n",
    "    for i in current_solution:\n",
    "        if i == to_swap_hub:\n",
    "            if p == to_swap_hub-1:\n",
    "                p += 1\n",
    "            else:\n",
    "                x = p+1\n",
    "                possible_nodes.append(x)\n",
    "                p += 1\n",
    "                \n",
    "        else:\n",
    "            p += 1\n",
    "    \n",
    "    \n",
    "    \n",
    "    # Swap\n",
    "    if len(possible_nodes) > 0:\n",
    "        to_swap_node = random.choice(possible_nodes)\n",
    "        p = 0\n",
    "        for i in current_solution:\n",
    "            if i == to_swap_hub:\n",
    "                current_solution[p] = to_swap_node\n",
    "                p += 1\n",
    "            else:\n",
    "                p += 1\n",
    "        p = 0            \n",
    "        for hub in current_hubs:\n",
    "            if hub == to_swap_hub:\n",
    "                current_hubs[p] = to_swap_node\n",
    "                break\n",
    "            else:\n",
    "                p += 1\n",
    "                \n",
    "\n",
    "    return current_hubs,current_solution   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3277982a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def SA (cost,flow,alpha,n,p,temp,iterations):\n",
    "    start = timer()\n",
    "    nodes = []\n",
    "    for i in range(n):\n",
    "        nodes.append(i+1)\n",
    "    t = temp\n",
    "    current_solution = random_solutions_noconstraint(p,n)\n",
    "    for i in range (iterations):\n",
    "        c = current_solution[1]\n",
    "        current = c.copy()\n",
    "        h = current_solution[0]\n",
    "        hubs = h.copy()\n",
    "        d = random.random()\n",
    "        if d >= 0.5:\n",
    "            new_solution = normal_swap(current,hubs,n)\n",
    "\n",
    "        else:\n",
    "            new_solution = hub_cluster_swap(current,hubs)\n",
    "\n",
    "            \n",
    "        current_cost = TNC_Flow(cost,alpha,current_solution,nodes,flow)\n",
    "        new_cost = TNC_Flow(cost,alpha,new_solution,nodes,flow)\n",
    "        \n",
    "        p = math.e ** (( - new_cost - current_cost) / t)\n",
    "        \n",
    "        if (new_cost < current_cost or random.random()<p):\n",
    "            current_solution = new_solution\n",
    "            \n",
    "            \n",
    "        t = t*0.95\n",
    "    current_cost = TNC_Flow(cost,alpha,current_solution,nodes,flow)\n",
    "    end = timer() \n",
    "    time = end-start \n",
    "    return current_solution,current_cost,time    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69178887",
   "metadata": {},
   "outputs": [],
   "source": [
    "# EXECUTION FOR CAB 25, 0.2, 3 HUBS\n",
    "SA(cost,flow_m,0.2,25,3,10000,1000)  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
